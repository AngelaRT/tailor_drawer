<?xml version="1.0" encoding="US-ASCII"?>

<!-- Parent recipe used to present the scenario, set the grammar and start the skill -->
<recipe name="start_story_telling_scenario">

  <precondition>

     <atom quatifier="exist">
        <slot name="type" val="state_machine_update"/>
        <slot name="subtype" val="user"/>
        <slot name="state" rel="equal" val="story_telling"/>
        <slot name="consumed" rel="equal" val="false" />
        <slot name="this" rel="bind" var="state_story_telling_atom"/>
    </atom>

  </precondition>

  <body order="sequence">

    <!-- Set the grammar for story_telling-->
    <action name="add_grammar" actor="asr">
        <roboml:args>
            <arg name="grammar" value="alz_story_telling_planned.gram" type="string"/>
        </roboml:args>
     </action>

    <!-- Action to start story_telling skill -->
    <action name="story_telling_start" actor="story_telling_skill">
      <roboml:args>
          <arg name="data"  value="0"  type="number"/>
      </roboml:args>
    </action>

    <!-- Change show liveliness from waiting to talking -->
    <action name="liveliness_status_update" actor="show_liveliness">
        <roboml:args>
            <arg name="status" value="talking" type="string"/>
        </roboml:args>
    </action>


    <goal recipe_name="intro_skill" initiator="any"/>
    <!--<goal recipe_name="start_sayings" initiator="any"/>
    <goal recipe_name="start_poems" initiator="any"/>-->


    <!-- until the story_telling skill is stopped, this recipe is active -->
    <goal recipe_name="end_skill" initiator="any"/>

    <!-- The 'state' atom is consumed here when we leave the story_telling state.
    We cannot consume it elsewhere so it remains alive as long as we remain in the state 'story_telling' -->
    <assignment>
      <atom>
        <slot name="this" var="state_story_telling_atom"/>
        <slot name="consumed" val="true"/>
      </atom>
    </assignment>

    <!-- To remove the presentation grammar. There is no delete, so we set the general grammar again-->
    <action name="set_grammar" actor="asr">
        <roboml:args>
            <arg name="grammar" value="alz_general.gram" type="string"/>
        </roboml:args>
    </action>

    <action name="request_state" actor="state_machine_node">
      <roboml:args>
          <arg name="state"  value="waiting"  type="string"/>
      </roboml:args>
    </action>

    <action name="say_text" actor="etts">
      <roboml:args>
          <arg name="sentence"  value="Ahora me puedes ordenar cualquier otra cosa" type="string"/>
          <arg name="priority" value="QUEUE_SENTENCE" type="string"/>
      </roboml:args>
    </action>


  </body>
</recipe>

<!--------------------------------------------------------------->

<!-- User asks for the story_telling_skill to end -->
<recipe name="intro_skill">

  <body order="sequence">

  <action name="say_text" actor="etts">
    <roboml:args>
        <arg name="sentence"  value="He vuelto a venir para seguir contando más cosillas y pasar un rato con vosotros." type="string"/>
        <arg name="priority" value="SHUTUP_IMMEDIATLY_AND_SAY_SENTENCE" type="string"/>
    </roboml:args>
  </action>

  <!--<action name="say_text" actor="etts">
    <roboml:args>
        <arg name="sentence"  value=" \\pause=1000 Para comenzar, si os apetece,
        \\pause=400 os voy a recitar una poesía que conocéis de sobra. \\pause=1000" type="string"/>
        <arg name="priority" value="QUEUE_SENTENCE" type="string"/>
    </roboml:args>
  </action>-->

  <!-- Action to story_telling_goto_tale -->
  <!--   <action name="story_telling_goto_tale" actor="story_telling_skill">
    <roboml:args>
        <arg name="story_reference"  value="pirata_corta"  type="string"/>
    </roboml:args>
  </action>

  <goal recipe_name="end_st_poem" initiator="any"/>

  <action name="say_text" actor="etts">
    <roboml:args>
        <arg name="sentence"  value=" \\pitch=100 Soy toda una poetísa.\\pitch \\item=Laugh_03 " type="string"/>
        <arg name="priority" value="QUEUE_SENTENCE" type="string"/>
    </roboml:args>
  </action> -->

  </body>
</recipe>

<!--------------------------------------------------------------->

<!-- User asks for the story_telling_skill to end -->
<recipe name="end_skill">
  <precondition>
    <atom quantifier="exist">
        <!-- Conditions that recieve a greet using a loquendo semantic grammar-->
        <slot name="type" val="asr_loquendoOK"/>
        <slot name="subtype" val="user"/>
        <slot name="consumed" val="false" rel="equal"/>
        <slot name="st_option" rel="equal" val="story_telling_end" />
        <slot name="confidence" rel=">" val="0.4" type="number" />
        <slot name="this" rel="bind" var="story_telling_end_atom"/>
     </atom>
  </precondition>

  <body order="sequence">

    <!-- Action from Gesture Player -->
    <action name="perform_gesture" actor="gesture_player">
      <roboml:args>
          <arg name="gesture_filename"  value="alz_yes" type="string"/>
      </roboml:args>
    </action>

    <!-- Consume the atom to avoid the repetition of the recipe again -->
    <assignment>
      <atom>
        <slot name="this" var="story_telling_end_atom"/>
        <slot name="consumed" val="true"/>
      </atom>
    </assignment>

    <!-- Action to story_telling_stop -->
    <action name="story_telling_stop" actor="story_telling_skill">
      <roboml:args>
          <arg name="data"  value="0"  type="number"/>
      </roboml:args>
    </action>

  </body>
</recipe>
